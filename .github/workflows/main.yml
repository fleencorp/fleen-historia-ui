name: Fleen Historia UI Workflow

on:
  push:
    branches:
      - "*"
      - '!main'
    branches-ignore:
      - main
  pull_request:
    branches:
      - "*"
    types:
      - opened
      - reopened
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'warning'
        type: choice
        options:
          - info
          - warning
          - debug
      tags:
        description: 'Test scenario tags'
        required: false
        type: boolean
      environment:
        description: 'Environment to run tests against'
        type: environment
        required: true
      name:
        description: 'print name'


permissions:
  contents: write
  actions: write
  issues: read
  checks: write
  pull-requests: write

jobs:
  build-and-deploy-to-dev:
    name: Build and deploy application to development environment
    runs-on: ubuntu-latest
    environment: development
    timeout-minutes: 60
    if: ${{ github.base_ref == 'development' }}

    steps:
      - name: Get latest code
        uses: actions/checkout@v4

      - name: Use Node.js 18
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install NPM packages
        run: npm install

      - name: Build Project
        run: npm run build:dev

      - name: Run Tests
        run: npm run test:release

      - name: Setup Cache
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_ACCESS_KEY_SECRET }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Remove files from s3 buckets
        run: aws s3 rm --recursive s3://${{ secrets.S3_BUCKET_NAME }}/${{ secrets.S3_STAGING_FOLDER }}

      - name: Copy to S3 Bucket
        run: aws s3 cp ./dist/fleen-historia-ui/ s3://${{ secrets.S3_BUCKET_NAME }}/${{ secrets.S3_STAGING_FOLDER }} --recursive

      - name: Clear cache
        run: aws cloudfront create-invalidation --distribution-id "${{ secrets.DEV_CLOUDFRONT_DISTRIBUTION_ID }}" --paths "/*"

  build-and-deploy-to-prod:
    name: Build and deploy application to production environment
    runs-on: ubuntu-latest
    environment: production
    if: ${{ github.base_ref == 'main' && github.event.pull_request.merged == true }}

    steps:
      - name: Get latest code
        uses: actions/checkout@v4

      - name: Restore Cache
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install NPM packages
        run: npm install

      - name: Build Project
        run: npm run build:prod

      - name: Run Tests
        run: npm run test:release

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_ACCESS_KEY_SECRET }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Remove files from s3 buckets
        run: aws s3 rm --recursive s3://${{ secrets.S3_BUCKET_NAME }}/${{ secrets.S3_PRODUCTION_FOLDER }}

      - name: Copy to S3 Bucket Prod
        run: aws s3 cp ./dist/fleen-historia-ui/ s3://${{ secrets.S3_BUCKET_NAME }}/${{ secrets.S3_PRODUCTION_FOLDER }} --recursive

      - name: clear cache
        run: aws cloudfront create-invalidation --distribution-id "${{ secrets.PROD_CLOUDFRONT_DISTRIBUTION_ID }}" --paths "/*"


  log-the-inputs:
    runs-on: ubuntu-latest

    steps:
      - run: |
          echo "Log level: $LEVEL"
          echo "Tags: $TAGS"
          echo "Environment: $ENVIRONMENT"
          echo "hello ${{ github.event.inputs.hello }}"
        env:
          LEVEL: ${{ github.event.inputs.logLevel }}
          TAGS: ${{ github.event.inputs.tags }}
          ENVIRONMENT: ${{ github.event.inputs.environment }}


  action-slack:
    runs-on: ubuntu-latest
    needs: [build-and-deploy-to-dev, build-and-deploy-to-prod]
    if: ${{ always() }}

    steps:
      - name: Slack Alarm
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          author_name: Fleen Historia
          fields: repo,message,commit,author,ref,job,took
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} # required
        if: always() # Pick up events even if the job fails or is canceled.
